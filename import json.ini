import json
import requests
import pandas as pd
import datetime as dt

def fetch_api_data():
    """
    從 API 抓取資料並進行處理
    """
    # 初始化資料容器
    data = []
    
    # API URL
    url = "https://api.cnyes.com/media/api/v1/newslist/category/tw_stock"
    
    # 計算時間參數
    end_time = dt.datetime.today()
    start_time = end_time - dt.timedelta(days=1)
    
    # 設定請求參數
    payload = {
        "page": 1,
        "limit": 30,
        "startAt": int(start_time.timestamp()),
        "endAt": int(end_time.timestamp())
    }
    
    try:
        # 發送第一次請求
        print("正在抓取第一頁資料...")
        res = requests.get(url, params=payload)
        res.raise_for_status() # 檢查請求是否成功
        
        jd = json.loads(res.text)
        
        # 將第一頁資料加入 DataFrame
        if 'items' in jd and jd['items']:
            data.append(pd.DataFrame(jd['items']['data']))
            total_pages = jd['items']['last_page']
            print(f"總共有 {total_pages} 頁資料")
            
            # 抓取剩餘頁面的資料
            for i in range(2, total_pages + 1):
                print(f"正在抓取第 {i} 頁資料...")
                payload["page"] = i
                
                res = requests.get(url, params=payload)
                res.raise_for_status()
                
                jd = json.loads(res.text)
                if 'items' in jd and jd['items'] and 'data' in jd['items']:
                    data.append(pd.DataFrame(jd['items']['data']))
            
            # 合併所有資料
            if data:
                df = pd.concat(data, ignore_index=True)
                print(f"成功抓取 {len(df)} 筆資料")
                
                # 資料處理
                df = process_data(df)
                
                return df
            else:
                print("沒有找到任何資料")
                return pd.DataFrame()
        else:
            print("API 回應格式不正確")
            return pd.DataFrame()
            
    except requests.exceptions.RequestException as e:
        print(f"請求錯誤: {e}")
        return pd.DataFrame()
    except json.JSONDecodeError as e:
        print(f"JSON 解析錯誤: {e}")
        return pd.DataFrame()
    except Exception as e:
        print(f"其他錯誤: {e}")
        return pd.DataFrame()

def process_data(df):
    """
    處理抓取到的資料
    """
    if df.empty:
        return df
    
    # 移除重複資料
    df = df.drop_duplicates()
    
    # 如果有時間欄位，進行時間格式轉換
    if 'publishAt' in df.columns:
        df['publishAt'] = pd.to_datetime(df['publishAt'], unit='s')
    
    # 排序資料 (按發布時間降序)
    if 'publishAt' in df.columns:
        df = df.sort_values('publishAt', ascending=False)
    
    # 重設索引
    df = df.reset_index(drop=True)
    
    print("資料處理完成")
    return df

def save_data(df, filename="news_data.csv"):
    """
    儲存資料到 CSV 檔案
    """
    try:
        df.to_csv(filename, index=False, encoding='utf-8-sig')
        print(f"資料已儲存至 {filename}")
    except Exception as e:
        print(f"儲存檔案時發生錯誤: {e}")

def display_summary(df):
    """
    顯示資料摘要
    """
    if df.empty:
        print("沒有資料可以顯示")
        return
    
    print("\n=== 資料摘要 ===")
    print(f"總筆數: {len(df)}")
    print(f"欄位數: {len(df.columns)}")
    print(f"欄位名稱: {list(df.columns)}")
    
    if 'title' in df.columns:
        print(f"\n最新 5 則新聞標題:")
        for i, title in enumerate(df['title'].head(5), 1):
            print(f"{i}. {title}")

def main():
    """
    主程式
    """
    print("開始執行資料抓取程式...")
    
    # 抓取資料
    df = fetch_api_data()
    
    if not df.empty:
        # 顯示摘要
        display_summary(df)
        
        # 儲存資料
        save_data(df)
        
        print("\n程式執行完成！")
    else:
        print("程式執行失敗，未能取得資料")

if __name__ == "__main__":
    main()